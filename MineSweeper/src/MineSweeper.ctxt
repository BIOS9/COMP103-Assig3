#BlueJ class context
comment0.target=MineSweeper
comment0.text=\r\n\ \ Simple\ 'Minesweeper'\ program.\r\n\ \ There\ is\ a\ grid\ of\ cells,\ some\ of\ which\ contain\ a\ mine.\r\n\ \ The\ user\ can\ click\ on\ a\ cell\ to\ either\ expose\ it\ or\ to\r\n\ \ mark/unmark\ it.\r\n\ \ \r\n\ \ If\ the\ user\ exposes\ a\ cell\ with\ a\ mine,\ they\ lose.\r\n\ \ Otherwise,\ it\ is\ uncovered,\ and\ shows\ a\ number\ which\ represents\ the\r\n\ \ number\ of\ mines\ in\ the\ eight\ cells\ surrounding\ that\ one.\r\n\ \ If\ there\ are\ no\ mines\ adjacent\ to\ it,\ then\ all\ the\ unexposed\ cells\r\n\ \ immediately\ adjacent\ to\ it\ are\ exposed\ (and\ and\ so\ on)\r\n\r\n\ \ If\ the\ user\ marks\ a\ cell,\ then\ they\ cannot\ expose\ the\ cell,\r\n\ \ (unless\ they\ unmark\ it\ first)\r\n\ \ When\ all\ squares\ with\ mines\ are\ marked,\ and\ all\ the\ squares\ without\r\n\ \ mines\ are\ exposed,\ the\ user\ has\ won.\r\n
comment1.params=
comment1.target=MineSweeper()
comment1.text=\r\n\ Construct\ a\ new\ MineSweeper\ object\r\n\ and\ set\ up\ the\ GUI\r\n
comment10.params=
comment10.target=void\ makeGrid()
comment10.text=\r\n\ Construct\ a\ grid\ with\ random\ mines.\r\n
comment11.params=
comment11.target=void\ drawWin()
comment11.text=Draw\ a\ message\ telling\ the\ player\ they\ have\ won
comment12.params=
comment12.target=void\ drawLose()
comment12.text=\r\n\ Draw\ a\ message\ telling\ the\ player\ they\ have\ lost\r\n\ and\ expose\ all\ the\ cells\ and\ redraw\ them\r\n
comment13.params=x\ y
comment13.target=boolean\ isPointOnFace(double,\ double)
comment13.text=\r\n\ Method\ to\ calculate\ if\ the\ cursor\ is\ on\ the\ face\ reset\ button\r\n\ Used\ when\ detecting\ a\ click\r\n
comment14.params=state
comment14.target=void\ drawFace(int)
comment15.params=arguments
comment15.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=setup\ buttons
comment3.params=
comment3.target=void\ runAI()
comment4.params=c\ depth
comment4.target=void\ printContents(java.awt.Container,\ int)
comment4.text=\r\n\ Recursively\ prints\ out\ the\ content\ tree\ of\ a\ UI\ container\r\n\ Used\ to\ find\ where\ in\ the\ UI\ component\ tree\ the\ ECS100Canvas\ object\ is\r\n
comment5.params=row\ col
comment5.target=void\ tryExpose(int,\ int)
comment5.text=\ \r\n\ The\ player\ has\ clicked\ on\ a\ cell\ to\ expose\ it\r\n\ -\ if\ it\ is\ already\ exposed\ or\ marked,\ do\ nothing.\r\n\ -\ if\ it's\ a\ mine\:\ lose\ (call\ drawLose())\ \r\n\ -\ otherwise\ expose\ it\ (call\ exposeCellAt)\r\n\ then\ check\ to\ see\ if\ the\ player\ has\ won\ and\ call\ drawWon()\ if\ they\ have.\r\n\ (This\ method\ is\ not\ recursive)\r\n
comment6.params=row\ col
comment6.target=void\ exposeCellAt(int,\ int)
comment6.text=\ \r\n\ \ Expose\ a\ cell,\ and\ spread\ to\ its\ neighbours\ if\ safe\ to\ do\ so.\r\n\ \ It\ is\ guaranteed\ that\ this\ cell\ is\ safe\ to\ expose\ (ie,\ does\ not\ have\ a\ mine).\r\n\ \ If\ it\ is\ already\ exposed,\ we\ are\ done.\r\n\ \ Otherwise\ expose\ it,\ and\ redraw\ it.\r\n\ \ If\ the\ number\ of\ adjacent\ mines\ of\ this\ cell\ is\ 0,\ then\r\n\ \ \ \ \ expose\ all\ its\ neighbours\ (which\ are\ safe\ to\ expose)\r\n\ \ \ \ \ (and\ if\ they\ have\ no\ adjacent\ mine,\ expose\ their\ neighbours,\ and\ ....)\r\n
comment7.params=row\ col
comment7.target=void\ mark(int,\ int)
comment7.text=\r\n\ Mark/unmark\ the\ cell.\r\n\ If\ the\ cell\ is\ exposed,\ don't\ do\ anything,\r\n\ If\ it\ is\ marked,\ unmark\ it.\r\n\ otherwise\ mark\ it\ and\ redraw.\r\n\ (Marking\ cannot\ make\ the\ player\ win\ or\ lose)\r\n
comment8.params=
comment8.target=boolean\ hasWon()
comment8.text=\ \r\n\ Returns\ true\ if\ the\ player\ has\ won\:\r\n\ If\ all\ the\ cells\ without\ a\ mine\ have\ been\ exposed,\ then\ the\ player\ has\ won.\r\n
comment9.params=row\ col
comment9.target=void\ redrawCell(int,\ int)
comment9.text=\r\n\ Redraws\ a\ cell\ at\ a\ given\ board\ position\ on\ the\ screen\r\n
numComments=16
